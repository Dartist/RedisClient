{"dependencies":[{"uri":"dart-sdk/lib/core/core.dart","name":"dart:core","id":"dart.core","children":[{"comment":"\nEverything in Dart is an [Object].\n","uri":"dart-sdk/lib/core/object.dart","name":"Object","id":"Object","children":[{"returnType":{"refId":"dart.core/bool","name":"bool"},"isOperator":true,"comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","name":"==","id":"==1()","children":[{"name":"other","id":"other","kind":"param"}],"line":"29","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"\nReturns a string representation of this object.\n","name":"toString","id":"toString0()","line":"48","kind":"method"},{"comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [Invocation].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","name":"noSuchMethod","id":"noSuchMethod1()","children":[{"ref":{"refId":"dart.core/Invocation","name":"Invocation"},"name":"invocation","id":"invocation","kind":"param"}],"line":"60","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","name":"hashCode","id":"hashCode","line":"43","kind":"property"},{"ref":{"refId":"dart.core/Type","name":"Type"},"comment":"\nA representation of the runtime type of the object.\n","name":"runtimeType","id":"runtimeType","line":"65","kind":"property"},{"comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","name":"Object","id":"Object0()","line":"18","kind":"constructor"}],"line":"10","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","uri":"dart-sdk/lib/core/exceptions.dart","name":"Exception","id":"Exception","children":[{"name":"Exception","id":"Exception1()","children":[{"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"21","kind":"constructor"}],"line":"20","kind":"class"}],"line":"5","kind":"library"},{"uri":"dart-sdk/lib/async/async.dart","name":"dart:async","id":"dart.async","children":[{"isAbstract":true,"interfaces":[{"refId":"dart.async/StreamTransformer","arguments":[{"refId":"dart.async/StreamEventTransformer/S","name":"S"},{"refId":"dart.async/StreamEventTransformer/T","name":"T"}],"name":"StreamTransformer"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase class for transformers that modifies stream events.\n\nA [StreamEventTransformer] transforms incoming Stream\nevents of one kind into outgoing events of (possibly) another kind.\n\nSubscribing on the stream returned by [bind] is the same as subscribing on\nthe source stream, except that events are passed through the [transformer]\nbefore being emitted. The transformer may generate any number and\ntypes of events for each incoming event. Pauses on the returned\nsubscription are forwarded to this stream.\n\nAn example that duplicates all data events:\n\n    class DoubleTransformer<T> extends StreamEventTransformerBase<T, T> {\n      void handleData(T data, EventSink<T> sink) {\n        sink.add(value);\n        sink.add(value);\n      }\n    }\n    someTypeStream.transform(new DoubleTransformer<Type>());\n\nThe default implementations of the \"handle\" methods forward\nthe events unmodified. If using the default [handleData] the generic type [T]\nneeds to be assignable to [S].\n","uri":"dart-sdk/lib/async/stream.dart","name":"StreamEventTransformer","id":"StreamEventTransformer","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamEventTransformer/T","name":"T"}],"name":"Stream"},"name":"bind","id":"bind1()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamEventTransformer/S","name":"S"}],"name":"Stream"},"name":"source","id":"source","kind":"param"}],"line":"1032","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAct on incoming data event.\n\nThe method may generate any number of events on the sink, but should\nnot throw.\n","name":"handleData","id":"handleData2()","children":[{"ref":{"refId":"dart.async/StreamEventTransformer/S","name":"S"},"name":"event","id":"event","kind":"param"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamEventTransformer/T","name":"T"}],"name":"EventSink"},"name":"sink","id":"sink","kind":"param"}],"line":"1057","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAct on incoming error event.\n\nThe method may generate any number of events on the sink, but should\nnot throw.\n","name":"handleError","id":"handleError2()","children":[{"name":"error","id":"error","kind":"param"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamEventTransformer/T","name":"T"}],"name":"EventSink"},"name":"sink","id":"sink","kind":"param"}],"line":"1068","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nAct on incoming done event.\n\nThe method may generate any number of events on the sink, but should\nnot throw.\n","name":"handleDone","id":"handleDone1()","children":[{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamEventTransformer/T","name":"T"}],"name":"EventSink"},"name":"sink","id":"sink","kind":"param"}],"line":"1078","kind":"method"},{"name":"StreamEventTransformer","id":"StreamEventTransformer0()","line":"1030","kind":"constructor"},{"name":"S","id":"S","kind":"typeparam"},{"name":"T","id":"T","kind":"typeparam"}],"line":"1029","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nThe target of a [Stream.transform] call.\n\nThe [Stream.transform] call will pass itself to this object and then return\nthe resulting stream.\n","uri":"dart-sdk/lib/async/stream.dart","name":"StreamTransformer","id":"StreamTransformer","children":[{"returnType":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamTransformer/T","name":"T"}],"name":"Stream"},"name":"bind","id":"bind1()","children":[{"ref":{"refId":"dart.async/Stream","arguments":[{"refId":"dart.async/StreamTransformer/S","name":"S"}],"name":"Stream"},"name":"stream","id":"stream","kind":"param"}],"line":"999","kind":"method"},{"comment":"\nCreate a [StreamTransformer] that delegates events to the given functions.\n\nThis is actually a [StreamEventTransformer] where the event handling is\nperformed by the function arguments.\nIf an argument is omitted, it acts as the corresponding default method from\n[StreamEventTransformer].\n\nExample use:\n\n    stringStream.transform(new StreamTransformer<String, String>(\n        handleData: (Strung value, EventSink<String> sink) {\n          sink.add(value);\n          sink.add(value);  // Duplicate the incoming events.\n        }));\n\n","name":"StreamTransformer","id":"StreamTransformer3()","children":[{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"handleData","id":"handleData","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/StreamTransformer/S","name":"S"},"uri":"dart-sdk/lib/async/stream.dart","name":"data","id":"data","line":"991","kind":"param"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamTransformer/T","name":"T"}],"name":"EventSink"},"uri":"dart-sdk/lib/async/stream.dart","name":"sink","id":"sink","line":"991","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"991","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"handleError","id":"handleError","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"uri":"dart-sdk/lib/async/stream.dart","name":"error","id":"error","line":"992","kind":"param"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamTransformer/T","name":"T"}],"name":"EventSink"},"uri":"dart-sdk/lib/async/stream.dart","name":"sink","id":"sink","line":"992","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"992","kind":"param"},{"isNamed":true,"ref":{"refId":"dart.core/Function","name":"Function"},"isOptional":true,"name":"handleDone","id":"handleDone","children":[{"returnType":{"refId":"void","name":"void"},"uri":"dart-sdk/lib/core/function.dart","name":"Function","id":"Function","children":[{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"dart.async/StreamTransformer/T","name":"T"}],"name":"EventSink"},"uri":"dart-sdk/lib/async/stream.dart","name":"sink","id":"sink","line":"993","kind":"param"}],"line":"13","kind":"functiontype"}],"line":"993","kind":"param"}],"line":"990","kind":"constructor"},{"name":"S","id":"S","kind":"typeparam"},{"name":"T","id":"T","kind":"typeparam"}],"line":"972","kind":"class"}],"line":"5","kind":"library"}],"comment":"\nThis is a [StreamTransformer] for redis Socket replies.\n\nIt converts a binary stream from a redis socket to [RedisReply] objects.\n\nYou can use the transformer in a Socket like this:\n\n    socket.transform(new RedisProtocolTransformer()).listen((RedisReply reply) { });\n\nThere are five types of [RedisReply]s:\n\n - [ErrorReply]\n - [StatusReply]\n - [IntegerReply]\n - [BulkReply]\n - [MultiBulkReply]\n","uri":"RedisClient/lib/redis_protocol_transformer.dart","id":"redis_protocol_transformer","children":[{"superclass":{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"},"comment":"\nThis class differs a bit from the oder RedisReplies in that it actually\nholds a list of mulitple [RedisReply]s.\n","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"MultiBulkReply","id":"MultiBulkReply","children":[{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nConsumes the first line with an [_OneLineDataConsumer], retrieves the\nnumber of replies from it.\n","name":"_consumeData","isPrivate":true,"id":"_consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","line":"250","kind":"param"}],"line":"249","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Returns true if all replies have successfully been returned.","name":"done","id":"done","line":"224","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"}],"name":"List"},"name":"replies","id":"replies","line":"239","kind":"property"},{"ref":{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"},"name":"_lastReply","isPrivate":true,"id":"_lastReply","line":"243","kind":"property"},{"ref":{"refId":"redis_protocol_transformer/_OneLineDataConsumer","name":"_OneLineDataConsumer"},"isFinal":true,"name":"_initialLineDataConsumer","isPrivate":true,"id":"_initialLineDataConsumer","line":"218","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"The number of replies this multi bulk reply returns.","name":"_numberOfReplies","isPrivate":true,"id":"_numberOfReplies","line":"221","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"}],"name":"List"},"comment":"Holds the list of [RedisReply]s.","name":"_replies","isPrivate":true,"id":"_replies","line":"237","kind":"variable"}],"line":"216","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"},"comment":"Used for bulk replies","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"BulkReply","id":"BulkReply","children":[{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nConsumes the first line with an [_OneLineDataConsumer], retrieves the\nbyteLength from it, and consumes the rest of the data with a\n[_BytesDataConsumer].\n","name":"_consumeData","isPrivate":true,"id":"_consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","line":"157","kind":"param"}],"line":"156","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\n Specifies if this reply has been fully received.\n","name":"done","id":"done","line":"146","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"Returns the raw bytes of this reply.","name":"bytes","id":"bytes","line":"191","kind":"property"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Returns the reply as String.","name":"string","id":"string","line":"201","kind":"property"},{"ref":{"refId":"redis_protocol_transformer/_OneLineDataConsumer","name":"_OneLineDataConsumer"},"isFinal":true,"name":"_initialLineDataConsumer","isPrivate":true,"id":"_initialLineDataConsumer","line":"138","kind":"variable"},{"ref":{"refId":"redis_protocol_transformer/_BytesDataConsumer","name":"_BytesDataConsumer"},"name":"_dataConsumer","isPrivate":true,"id":"_dataConsumer","line":"140","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"_dataAsString","isPrivate":true,"id":"_dataAsString","line":"198","kind":"variable"}],"line":"136","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/_OneLineReply","name":"_OneLineReply"},"comment":"Used for integer replies","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"IntegerReply","id":"IntegerReply","children":[{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Returns the integer received with this reply.","name":"integer","id":"integer","line":"131","kind":"property"}],"line":"128","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/_OneLineReply","name":"_OneLineReply"},"comment":"Used for error replies","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"ErrorReply","id":"ErrorReply","children":[{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Returns the error received with this reply.","name":"error","id":"error","line":"123","kind":"property"}],"line":"120","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/_OneLineReply","name":"_OneLineReply"},"comment":"Used for status replies","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"StatusReply","id":"StatusReply","children":[{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Returns the status received with this reply.","name":"status","id":"status","line":"115","kind":"property"}],"line":"112","kind":"class"},{"isAbstract":true,"superclass":{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"},"comment":"\nAll replies that can only consist of one line extend this class.\n\nThe line is always ended by CR LF.\n","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"_OneLineReply","isPrivate":true,"id":"_OneLineReply","children":[{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nRemoves the leading type character and checks if the data contains\nthe ending CR LF characters.\n","name":"_consumeData","isPrivate":true,"id":"_consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","line":"86","kind":"param"}],"line":"85","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the line of this reply.","name":"_getLine","isPrivate":true,"id":"_getLine0()","line":"100","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"\n Specifies if this reply has been fully received.\n","name":"done","id":"done","line":"79","kind":"property"},{"ref":{"refId":"redis_protocol_transformer/_OneLineDataConsumer","name":"_OneLineDataConsumer"},"isFinal":true,"name":"_dataConsumer","isPrivate":true,"id":"_dataConsumer","line":"74","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"name":"_line","isPrivate":true,"id":"_line","line":"97","kind":"variable"}],"line":"71","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase class for redis replies.\n\nEvery time a new redis reply is received, this class is instantiated,\nand returned with the corresponding data.\n","uri":"RedisClient/lib/transformer/redis_replies.dart","name":"RedisReply","id":"RedisReply","children":[{"returnType":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"Consumes the data and returns the uncosumed data if any, null otherwise.","name":"_consumeData","isPrivate":true,"id":"_consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"32","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Specifies if this reply has been fully received.","name":"done","id":"done","line":"28","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"A reply type","name":"STATUS","id":"STATUS","line":"12","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"A reply type","name":"ERROR","id":"ERROR","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"A reply type","name":"INTEGER","id":"INTEGER","line":"18","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"A reply type","name":"BULK","id":"BULK","line":"21","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"A reply type","name":"MULTI_BULK","id":"MULTI_BULK","line":"24","kind":"variable"},{"comment":"Default constructor does nothing.","name":"RedisReply","id":"RedisReply0()","line":"35","kind":"constructor"},{"comment":"\n Factory constructor for [RedisReply] implementations.\n\n Valid replies are:\n\n - [ErrorReply] (`\"-\"`)\n - [StatusReply] (`\"+\"`)\n - [IntegerReply] (`\":\"`)\n - [BulkReply] (`\"$\"`)\n - [MultiBulkReply] (`\"*\"`)\n","name":"RedisReply.fromType","id":"RedisReply.fromType1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"replyTypeChar","id":"replyTypeChar","kind":"param"}],"line":"48","kind":"constructor"}],"line":"9","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/_DataConsumer","name":"_DataConsumer"},"comment":"\nClass used by [RedisReply]s to get a fixed length of bytes out of data chunks.\n","uri":"RedisClient/lib/transformer/data_consumers.dart","name":"_BytesDataConsumer","isPrivate":true,"id":"_BytesDataConsumer","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nConsumes any number of data blocks.\n\nWhen the end of the line has been found, it returns the uncosumed data and\nsets [done] to true.\n\nCan't be called again, once the line is complete.\n","name":"consumeData","id":"consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"195","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"comment":"Returns the size of all data blocks.","name":"_dataBlocksLength","isPrivate":true,"id":"_dataBlocksLength","line":"185","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isFinal":true,"comment":"\n The byteLength of this data chunk.\n\n Note that this length does **not** include the trailing CR LF characters.\n","name":"byteLength","id":"byteLength","line":"179","kind":"variable"},{"name":"_BytesDataConsumer","id":"_BytesDataConsumer1()","children":[{"initializedField":{"refId":"redis_protocol_transformer/_BytesDataConsumer/byteLength","name":"byteLength"},"ref":{"refId":"dart.core/int","name":"int"},"name":"byteLength","id":"byteLength","kind":"param"}],"line":"181","kind":"constructor"}],"line":"171","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/_DataConsumer","name":"_DataConsumer"},"comment":"\nClass used by [RedisReply]s to get a single line out of data chunks.\n","uri":"RedisClient/lib/transformer/data_consumers.dart","name":"_OneLineDataConsumer","isPrivate":true,"id":"_OneLineDataConsumer","children":[{"returnType":{"refId":"void","name":"void"},"comment":"\nConsumes any number of data blocks.\n\nWhen the end of the line has been found, it returns the uncosumed data and\nsets [done] to true.\n\nCan't be called again, once the line is complete.\n","name":"consumeData","id":"consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"109","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the start symbol has already been transmitted.","name":"_receivedStartChar","isPrivate":true,"id":"_receivedStartChar","line":"99","kind":"variable"}],"line":"95","kind":"class"},{"isAbstract":true,"superclass":{"refId":"dart.core/Object","name":"Object"},"comment":"\nBase class for data block consumers used by [RedisReply]s to extract any kind\nof data.\n","uri":"RedisClient/lib/transformer/data_consumers.dart","name":"_DataConsumer","isPrivate":true,"id":"_DataConsumer","children":[{"returnType":{"refId":"void","name":"void"},"name":"consumeData","id":"consumeData1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"}],"line":"86","kind":"method"},{"ref":{"refId":"dart.core/bool","name":"bool"},"comment":"Whether the whole data has been consumed.","name":"done","id":"done","line":"18","kind":"property"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"\nReturns the complete data of this reply.\n\nThis can only be called when this reply is [done].\n\nIn contrast to [_dataBlocks] this strips the trailing CR LF.\n","name":"data","id":"data","line":"46","kind":"property"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"CR","id":"CR","line":"11","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"name":"LF","id":"LF","line":"13","kind":"variable"},{"ref":{"refId":"dart.core/bool","name":"bool"},"name":"_done","isPrivate":true,"id":"_done","line":"15","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"}],"name":"List"},"comment":"\nThis is a list of the actual data blocks of the reply.\n\nEvery time [consumeData] is called it adds a dataBlock here.\n\nThe datablocks are without the leading type character and closing delimiter.\n\nIf you want to access the data, use [data] which joins these blocks and\nreturns them as one list.\nBeware that you can only call [data] when the reply is [done].\n","name":"_dataBlocks","isPrivate":true,"id":"_dataBlocks","line":"32","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"The joined _dataBlocks.","name":"_data","isPrivate":true,"id":"_data","line":"36","kind":"variable"},{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"comment":"Holds the unconsumed data, if any.","name":"unconsumedData","id":"unconsumedData","line":"84","kind":"variable"}],"line":"9","kind":"class"},{"superclass":{"refId":"dart.async/StreamEventTransformer","arguments":[{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"}],"name":"StreamEventTransformer"},"comment":"\nThe [RedisProtocolTransformer] transforms a redis stream into [RedisReply]\nobjects.\nFor a documentation on the redis protocol, please view the\n[redis protocol documentation](http://redis.io/topics/protocol).\n","uri":"RedisClient/lib/transformer/transformer.dart","name":"RedisProtocolTransformer","id":"RedisProtocolTransformer","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Converts a list of char codes to a String","name":"_charCodesToString","isPrivate":true,"id":"_charCodesToString1()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"bytes","id":"bytes","kind":"param"}],"line":"75","kind":"method"},{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Converts a char code to a String","name":"_charCodeToString","isPrivate":true,"id":"_charCodeToString1()","children":[{"ref":{"refId":"dart.core/int","name":"int"},"name":"byte","id":"byte","kind":"param"}],"line":"78","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nActually handles the incoming data and adds [RedisReply] objects to the\nsink when they're ready.\n","name":"handleData","id":"handleData2()","children":[{"ref":{"refId":"dart.core/List","arguments":[{"refId":"dart.core/int","name":"int"}],"name":"List"},"name":"data","id":"data","kind":"param"},{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"}],"name":"EventSink"},"name":"output","id":"output","kind":"param"}],"line":"84","kind":"method"},{"returnType":{"refId":"void","name":"void"},"comment":"\nCloses the [EventSink] and adds an error before if there was some\nincomplete data\n","name":"handleDone","id":"handleDone1()","children":[{"ref":{"refId":"dart.async/EventSink","arguments":[{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"}],"name":"EventSink"},"name":"output","id":"output","kind":"param"}],"line":"119","kind":"method"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Charcode for status replies","name":"PLUS","id":"PLUS","line":"55","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Charcode for error replies","name":"DASH","id":"DASH","line":"58","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Charcode for integer replies","name":"COLON","id":"COLON","line":"61","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Charcode for bulk replies","name":"DOLLAR","id":"DOLLAR","line":"64","kind":"variable"},{"ref":{"refId":"dart.core/int","name":"int"},"isStatic":true,"comment":"Charcode for multi bulk replies","name":"ASTERIX","id":"ASTERIX","line":"67","kind":"variable"},{"ref":{"refId":"redis_protocol_transformer/RedisReply","name":"RedisReply"},"comment":"\nIf the transformer has alrady received data, this will hold the [RedisReply].\n","name":"_currentReply","isPrivate":true,"id":"_currentReply","line":"72","kind":"variable"}],"line":"52","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/RedisProtocolTransformerException","name":"RedisProtocolTransformerException"},"isThrowable":true,"comment":"This exception is thrown whenever the redis stream closed unexpectedly","uri":"RedisClient/lib/transformer/transformer.dart","name":"UnexpectedRedisClosureError","id":"UnexpectedRedisClosureError","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"_baseMessage","isPrivate":true,"id":"_baseMessage","line":"39","kind":"variable"},{"name":"UnexpectedRedisClosureError","id":"UnexpectedRedisClosureError1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"41","kind":"constructor"}],"line":"37","kind":"class"},{"superclass":{"refId":"redis_protocol_transformer/RedisProtocolTransformerException","name":"RedisProtocolTransformerException"},"isThrowable":true,"comment":"This exception is thrown whenever a redis response is incorrect.","uri":"RedisClient/lib/transformer/transformer.dart","name":"InvalidRedisResponseError","id":"InvalidRedisResponseError","children":[{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"name":"_baseMessage","isPrivate":true,"id":"_baseMessage","line":"30","kind":"variable"},{"name":"InvalidRedisResponseError","id":"InvalidRedisResponseError1()","children":[{"name":"message","id":"message","kind":"param"}],"line":"32","kind":"constructor"}],"line":"28","kind":"class"},{"isAbstract":true,"interfaces":[{"refId":"dart.core/Exception","name":"Exception"}],"superclass":{"refId":"dart.core/Object","name":"Object"},"isThrowable":true,"comment":"Base class for all Exceptions.","uri":"RedisClient/lib/transformer/transformer.dart","name":"RedisProtocolTransformerException","id":"RedisProtocolTransformerException","children":[{"returnType":{"refId":"dart.core/String","name":"String"},"comment":"Returns the [_baseMessage] with the [message].","name":"toString","id":"toString0()","line":"17","kind":"method"},{"ref":{"refId":"dart.core/String","name":"String"},"isFinal":true,"comment":"The error message of this exception.","name":"message","id":"message","line":"9","kind":"variable"},{"ref":{"refId":"dart.core/String","name":"String"},"comment":"Every subclass can set a base message that will prepend the actual message.","name":"_baseMessage","isPrivate":true,"id":"_baseMessage","line":"12","kind":"variable"},{"name":"RedisProtocolTransformerException","id":"RedisProtocolTransformerException1()","children":[{"initializedField":{"refId":"redis_protocol_transformer/RedisProtocolTransformerException/message","name":"message"},"ref":{"refId":"dart.core/String","name":"String"},"isOptional":true,"name":"message","id":"message","kind":"param"}],"line":"14","kind":"constructor"}],"line":"6","kind":"class"}],"line":"19","kind":"library"}